<project name="thesis build" default="build">
	<property name="src.dir" value="src" />
	<property name="src.main.dir" value="${src.dir}" />
	<property name="src.main.java.dir" value="${src.main.dir}/java" />
	<property name="src.main.glsl.dir" value="${src.main.dir}/glsl" />
	<property name="src.main.resources.dir" value="${src.main.dir}/resources" />

	<property name="build.main.dir" value="build/classes" />

	<property name="dist.dir" value="dist" />
	<property name="lib.dir" value="lib" />
	<property name="lib.build.dir" value="build.lib" />
   <available file="${lib.build.dir}" property="build.lib.dir.exists" />

	<property name="artifact.name" value="com.stephenwranger.thesis" />

	<property environment="env" />

	<!-- Deprecation info not printed by default. Can override by specifying command line option -->
	<property name="deprecation" value="off" />

	<presetdef name="thesis-javac">
		<javac deprecation="${deprecation}" source="1.8" target="1.8" debug="on" srcdir="${src.main.java.dir}" destdir="${build.main.dir}" includeantruntime="false">
			<classpath refid="thesis.class.path" />
			<compilerarg value="-Xlint" />
			<compilerarg value="-Xlint:-serial" />
			<compilerarg value="-Xlint:-path" />

			<compilerarg line="-Xmaxwarns 1000" />
		</javac>
	</presetdef>

	<!-- dependencies -->
	<path id="thesis.class.path">
		<!-- Compiled JView classes -->
		<pathelement path="${build.main.dir}" />
		<!-- 3rd party jars -->
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<!-- Compile-time dependencies -->
		<fileset dir=".">
			<include name="${lib.build.dir}/**/*.jar" if="build.lib.dir.exists" />
		</fileset>
	</path>

	<target name="init">
		<tstamp />

		<echo message="Build Classpath constructed from jars in ${lib.dir} and build.lib/ if it exists.${line.separator}" />
		<echo message="" />
		<pathconvert property="build.cp" refid="thesis.class.path" pathsep="${line.separator}" />
		<echo message="Build Classpath: ${line.separator}${build.cp}${line.separator}" />

		<echo message="" />

		<mkdir dir="${build.main.dir}" />
	</target>

	<!-- Compilation targets -->

	<target name="compile_thesis_core" depends="init">
		<thesis-javac>
			<include name="com/stephenwranger/thesis/**/*.java" />
		</thesis-javac>
	</target>


	<!-- Data deployment -->
	<target name="copy-resources" depends="init">
		<copy todir="${build.main.dir}">
			<fileset dir="${src.main.resources.dir}" includes="**/*" />
		</copy>
		<copy todir="${build.main.dir}">
			<fileset dir="${src.main.glsl.dir}" includes="**/*" />
		</copy>
	</target>

	<!-- Primary ant targets -->
	<target name="clean" description="Remove any resources generated by this build file.">
		<delete dir="${build.main.dir}" failonerror="false" />
		<delete dir="${dist.dir}" failonerror="false" />
		<delete dir="${doc.javadoc.dir}" failonerror="false" />
	</target>
	
	<!-- 
	<target name="src-jar" depends="init" description="Creates a jar file containing thesis source code in the distribution directory.">
		<jar jarfile="${dist.dir}/${artifact.name}-src.jar">
			<fileset dir=".">
				<include name="${src.dir}/**/*" />
			</fileset>
		</jar>
	</target>
   -->
	
	<target name="build" depends="init,compile_thesis_core,copy-resources" description="Builds thesis into build/" />

	<target name="dist" depends="build" description="Generate the distribution (jar) and places it in the dist/ directory.">
		<mkdir dir="${dist.dir}" />

		<jar jarfile="${dist.dir}/${artifact.name}.jar" duplicate="preserve" manifest="META-INF/MANIFEST.MF">
			<fileset dir="${build.main.dir}" excludes="META-INF/*.SF,META-INF/*.DSA,META-INF/*.RSA"/>
			<!--<zipgroupfileset dir="${lib.dir}" excludes="META-INF/*.SF,META-INF/*.DSA,META-INF/*.RSA">
				<include name="**/*.jar" />
			</zipgroupfileset>-->
		</jar>
	</target>

	<target name="javadoc" description="Generate JView JavaDocs and places them in docs/api.">
		<javadoc maxmemory="512m" destdir="${doc.javadoc.dir}" author="false" classpathref="thesis.class.path" source="1.7">
			<packageset dir="${src.main.java.dir}" />
		</javadoc>
	</target>

	<!-- 
	<target name="javadoc-jar" depends="javadoc" description="Generate thesis JavaDocs and places them in a jar file in the distribution directory.">
		<jar jarfile="${dist.dir}/${artifact.name}-javadoc.jar">
			<fileset dir="${doc.javadoc.dir}" />
		</jar>
	</target>
   -->

	<target name="unix-eol" description="Convert all end-of-line characters to unix style (LF)">
		<fixcrlf srcdir="${src.dir}" includes="**/*.java" eol="unix" fixlast="false" />
	</target>

</project>
